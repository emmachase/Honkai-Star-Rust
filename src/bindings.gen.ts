         // This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

         export const commands = {
async prankHimJohn(characterCfg: CharacterConfig, characterState: CharacterState, lightConeCfg: LightConeConfig, lightConeState: LightConeState, enemyConfig: EnemyConfig) : Promise<string> {
return await TAURI_INVOKE("plugin:tauri-specta|prank_him_john", { characterCfg, characterState, lightConeCfg, lightConeState, enemyConfig });
},
async getFilteredRelicCount(filters: RelicFilters) : Promise<null> {
return await TAURI_INVOKE("plugin:tauri-specta|get_filtered_relic_count", { filters });
}
}



/** user-defined types **/

export type CharacterConfig = { Jingliu: JingliuConfig }
export type CharacterSkillState = { basic: number; skill: number; ult: number; talent: number }
export type CharacterState = { level: number; ascension: number; eidolon: number; skills: CharacterSkillState; traces: CharacterTraceState }
export type CharacterTraceState = { ability_1: boolean; ability_2: boolean; ability_3: boolean; stat_1: boolean; stat_2: boolean; stat_3: boolean; stat_4: boolean; stat_5: boolean; stat_6: boolean; stat_7: boolean; stat_8: boolean; stat_9: boolean; stat_10: boolean }
export type EffectPropertyType = "HPDelta" | "AttackDelta" | "DefenceDelta" | "SpeedDelta" | "HPAddedRatio" | "AttackAddedRatio" | "DefenceAddedRatio" | "CriticalChanceBase" | "CriticalDamageBase" | "HealRatioBase" | "StatusProbabilityBase" | "PhysicalAddedRatio" | "FireAddedRatio" | "IceAddedRatio" | "ThunderAddedRatio" | "WindAddedRatio" | "QuantumAddedRatio" | "ImaginaryAddedRatio" | "AllDamageTypeAddedRatio" | "BreakDamageAddedRatioBase" | "SPRatioBase" | "StatusResistanceBase"
export type EnemyConfig = { count: number; level: number; resistance: number; elemental_weakness: boolean; weakness_broken: boolean }
export type IShallBeMyOwnSwordConfig = { eclipse_stacks: number; max_stack_def_pen: boolean }
export type JingliuConfig = { enhanced_state: boolean; hp_drain_pct: number; e1_crit_dmg: boolean; e2_skill_buff: boolean }
export type LightConeConfig = { IShallBeMyOwnSword: IShallBeMyOwnSwordConfig }
export type LightConeState = { level: number; ascension: number; superimposition: number }
export type RelicFilters = { chest: EffectPropertyType[]; feet: EffectPropertyType[]; planar_sphere: EffectPropertyType[]; link_rope: EffectPropertyType[] }

/** tauri-specta globals **/

         import { invoke as TAURI_INVOKE } from "@tauri-apps/api";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindowHandle as __WebviewWindowHandle__ } from "@tauri-apps/api/window";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindowHandle__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindowHandle__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}

     